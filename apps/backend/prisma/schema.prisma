generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- MODELOS DE USUÁRIO E CONFIGURAÇÕES ---

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  clients               Client[]
  products              Product[]
  sales                 Sale[]
  accountsPay           AccountPay[]
  accountsRec           AccountRec[]
  contasCorrentes       ContaCorrente[]
  contasContabeis       ContaContabil[]
  settings              UserSettings?
  XmlImportLog          XmlImportLog[]
  transacoes            Transacao[]
  creditCards           CreditCard[] // Relação com cartões
  transactionCategories TransactionCategory[] // Relação com categorias
  CreditCardBill        CreditCardBill[]
}

enum Role {
  USER
  ADMIN
}


model UserSettings {
  id                    String  @id @default(uuid())
  userId                String  @unique
  user                  User    @relation(fields: [userId], references: [id])
  defaultReceitaContaId String?
  defaultCaixaContaId   String?
  defaultDespesaContaId String?

  @@map("user_settings")
}

// --- MODELOS DE NEGÓCIO (VENDAS, PRODUTOS, CLIENTES) ---

model Client {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  name        String
  email       String?   @unique
  phone       String?
  address     String?
  birthDate   DateTime?
  cep         String?
  logradouro  String?
  numero      String?
  complemento String?
  bairro      String?
  cidade      String?
  uf          String?

  gender          String?
  preferences     String?
  purchaseHistory Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sales           Sale[]
  cpf             String?   @unique // <-- ADICIONE ESTA LINHA
}

model Product {
  id             String          @id @default(uuid())
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  name           String
  description    String?
  price          Decimal         @db.Decimal(10, 2)
  stock          Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  saleItems      SaleItem[]
  stockMovements StockMovement[]
}

model StockMovement {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  type      String
  quantity  Int
  createdAt DateTime @default(now())
}

model Sale {
  id            String            @id @default(uuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id])
  clientId      String
  client        Client            @relation(fields: [clientId], references: [id])
  orderNumber   String            @unique
  totalAmount   Decimal           @db.Decimal(10, 2)
  feeAmount     Decimal?          @db.Decimal(10, 2)
  netAmount     Decimal?          @db.Decimal(10, 2)
  paymentMethod String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  saleItems     SaleItem[]
  accountsRec   AccountRec[]
  installments  SaleInstallment[]
}

model SaleItem {
  id        String   @id @default(uuid())
  saleId    String
  sale      Sale     @relation(fields: [saleId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SaleInstallmentStatus {
  PENDING
  PAID
  OVERDUE
}

model SaleInstallment {
  id                String                @id @default(uuid())
  saleId            String
  amount            Decimal
  dueDate           DateTime
  status            SaleInstallmentStatus
  paidAt            DateTime?
  installmentNumber Int
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  sale Sale @relation(fields: [saleId], references: [id])

  @@map("sale_installments")
}

// --- MODELOS FINANCEIROS ---

enum TipoTransacaoPrisma {
  CREDITO
  DEBITO
}

enum TipoContaContabilPrisma {
  ATIVO
  PASSIVO
  PATRIMONIO_LIQUIDO
  RECEITA
  DESPESA
}

model AccountPay {
  id                String    @id @default(uuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  description       String
  amount            Decimal   @db.Decimal(10, 2)
  dueDate           DateTime  @db.Timestamptz
  paid              Boolean   @default(false)
  paidAt            DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isInstallment     Boolean?
  installmentNumber Int?
  totalInstallments Int?

  contaContabilId String? // A chave estrangeira para a categoria/conta contábil
  contaContabil   ContaContabil? @relation(fields: [contaContabilId], references: [id])

  @@map("accounts_pay")
}

model AccountRec {
  id              String         @id @default(uuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  saleId          String?
  sale            Sale?          @relation(fields: [saleId], references: [id])
  description     String
  amount          Decimal        @db.Decimal(10, 2)
  dueDate         DateTime
  received        Boolean        @default(false)
  receivedAt      DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  contaCorrenteId String?
  contaCorrente   ContaCorrente? @relation(fields: [contaCorrenteId], references: [id])
}

model ContaContabil {
  id                     String                  @id @default(uuid())
  userId                 String
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  codigo                 String
  nome                   String
  tipo                   TipoContaContabilPrisma
  aceitaLancamento       Boolean                 @default(true)
  contaPaiId             String?
  contaPai               ContaContabil?          @relation("SubContas", fields: [contaPaiId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subContas              ContaContabil[]         @relation("SubContas")
  transacoes             Transacao[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  AccountPay             AccountPay[]
  creditCardTransactions CreditCardTransaction[]
  CreditCard             CreditCard[]
  cartoesDeCredito       CreditCard[]            @relation("CartaoParaContaPassivo")

  @@unique([userId, codigo])
  @@map("contas_contabeis")
}

model ContaCorrente {
  id          String       @id @default(uuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  nome        String
  numeroConta String
  agencia     String?
  saldo       Decimal      @db.Decimal(10, 2)
  moeda       String       @default("BRL")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  transacoes  Transacao[]
  accountsRec AccountRec[]

  @@unique([userId, numeroConta])
  @@map("contas_correntes")
}

model Transacao {
  id              String              @id @default(uuid())
  userId          String
  user            User                @relation(fields: [userId], references: [id])
  tipo            TipoTransacaoPrisma
  valor           Decimal             @db.Decimal(10, 2)
  moeda           String
  descricao       String?
  dataHora        DateTime            @default(now())
  contaContabilId String
  fitId           String?
  contaContabil   ContaContabil       @relation(fields: [contaContabilId], references: [id])
  contaCorrenteId String?
  contaCorrente   ContaCorrente?      @relation(fields: [contaCorrenteId], references: [id], onDelete: NoAction)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@unique([contaCorrenteId, fitId])
  @@map("transacoes")
}

// --- MODELOS DE CARTÃO DE CRÉDITO ---

model CreditCard {
  id           String                  @id @default(uuid())
  userId       String
  user         User                    @relation(fields: [userId], references: [id])
  name         String
  flag         String
  closingDay   Int
  dueDate      Int
  transactions CreditCardTransaction[]
  bills        CreditCardBill[]

  contaContabilPassivoId String?
  contaContabilPassivo   ContaContabil? @relation("CartaoParaContaPassivo", fields: [contaContabilPassivoId], references: [id])
  ContaContabil          ContaContabil? @relation(fields: [contaContabilId], references: [id])
  contaContabilId        String?

  @@map("credit_cards")
}

model CreditCardTransaction {
  id                    String               @id @default(uuid())
  creditCardId          String
  creditCard            CreditCard           @relation(fields: [creditCardId], references: [id])
  description           String
  amount                Decimal              @db.Decimal(10, 2)
  date                  DateTime
  isInstallment         Boolean              @default(false)
  installments          Int?
  currentInstallment    Int?
  contaContabilId       String?
  contaContabil         ContaContabil?       @relation(fields: [contaContabilId], references: [id])
  creditCardBillId      String?
  creditCardBill        CreditCardBill?      @relation(fields: [creditCardBillId], references: [id])
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  TransactionCategory   TransactionCategory? @relation(fields: [transactionCategoryId], references: [id])
  transactionCategoryId String?

  @@map("credit_card_transactions")
}

model CreditCardBill {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  creditCardId String
  creditCard   CreditCard @relation(fields: [creditCardId], references: [id])

  name        String
  startDate   DateTime
  endDate     DateTime
  dueDate     DateTime
  totalAmount Decimal   @db.Decimal(10, 2)
  paid        Boolean   @default(false)
  paidAt      DateTime?

  transactions CreditCardTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("credit_card_bills")
}

model TransactionCategory {
  id                     String                  @id @default(uuid())
  userId                 String
  user                   User                    @relation(fields: [userId], references: [id])
  name                   String
  creditCardTransactions CreditCardTransaction[]

  @@unique([userId, name])
  @@map("transaction_categories")
}

// --- MODELOS AUXILIARES ---

model XmlImportLog {
  id        String   @id @default(cuid())
  nfeKey    String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

// --- MODELOS DA LANDING PAGE ---

model LandingPage {
  id          String    @id @default(uuid())
  name        String    @unique @default("default") // Apenas uma landing page principal
  logoText    String?   // Novo campo para o texto do logotipo
  logoImageId String?   // Novo campo para o ID da imagem do logotipo
  logoImage   Media?    @relation(fields: [logoImageId], references: [id]) // Relação com o modelo Media
  sections    Section[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Section {
  id            String    @id @default(uuid())
  landingPageId String
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id])
  order         Int       // Ordem da seção na página
  type          String    // Tipo da seção (ex: "hero", "features")
  content       Json      // Conteúdo JSON da seção (títulos, descrições, IDs de mídia)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([landingPageId, order])
}

// --- MODELO PARA MÍDIA (IMAGENS, ETC.) ---

model Media {
  id        String   @id @default(uuid())
  filename  String   @unique
  mimetype  String
  size      Int
  path      String   @unique // Caminho relativo ou URL do arquivo
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  landingPageLogos LandingPage[] // Relação inversa para LandingPage
}