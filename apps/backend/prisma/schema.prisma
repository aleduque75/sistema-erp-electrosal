generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- MODELO DE ORGANIZAÇÃO ---
model Organization {
  id              String           @id @default(uuid())
  name            String
  users           User[]
  pessoas         Pessoa[]
  products        Product[]
  sales           Sale[]
  accountsPay     AccountPay[]
  accountsRec     AccountRec[]
  contasCorrentes ContaCorrente[]
  contasContabeis ContaContabil[]
  creditCards     CreditCard[]
  creditCardBills CreditCardBill[]

  xmlImportLogs         XmlImportLog[]
  landingPages          LandingPage[]
  media                 Media[]
  transacoes            Transacao[]
  CreditCardFee         CreditCardFee[]
  absorbCreditCardFee   Boolean         @default(false)
  creditCardReceiveDays Int?            @default(30)
  paymentTerms          PaymentTerm[]
  clients               Client[]
  fornecedores          Fornecedor[]
  funcionarios          Funcionario[]
  purchaseOrders        PurchaseOrder[] // Nova relação
}

// --- MODELOS DE USUÁRIO E CONFIGURAÇÕES ---
model User {
  id             String        @id @default(uuid())
  email          String        @unique
  password       String
  name           String?
  role           Role          @default(USER)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  settings       UserSettings?
}

enum Role {
  USER
  ADMIN
}

model UserSettings {
  id                    String  @id @default(uuid())
  userId                String  @unique
  user                  User    @relation(fields: [userId], references: [id])
  defaultReceitaContaId String?
  defaultCaixaContaId   String?
  defaultDespesaContaId String?

  @@map("user_settings")
}

// --- MODELOS DE NEGÓCIO (VENDAS, PRODUTOS, PESSOAS) ---
enum PessoaType {
  FISICA
  JURIDICA
}

model Pessoa {
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  type PessoaType

  name        String // Nome (Física) ou Nome Fantasia (Jurídica)
  razaoSocial String? // Apenas para Jurídica

  email String? @unique
  phone String?

  cpf  String? @unique // Apenas para Física
  cnpj String? @unique // Apenas para Jurídica

  birthDate DateTime?
  gender    String?

  cep         String?
  logradouro  String?
  numero      String?
  complemento String?
  bairro      String?
  cidade      String?
  uf          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  externalId String? @unique // Para importação de dados legados

  sales       Sale[]
  client      Client?      // Relação com o papel de Cliente
  fornecedor  Fornecedor?  // Relação com o papel de Fornecedor
  funcionario Funcionario? // Relação com o papel de Funcionário

  @@map("pessoas")
}

model Client {
  pessoaId String @id
  pessoa   Pessoa @relation(fields: [pessoaId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clients")
}

model Fornecedor {
  pessoaId String @id
  pessoa   Pessoa @relation(fields: [pessoaId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchaseOrders PurchaseOrder[] // Nova relação

  @@map("fornecedores")
}

model Funcionario {
  pessoaId String @id
  pessoa   Pessoa @relation(fields: [pessoaId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  hireDate DateTime // Data de admissão
  position String?  // Cargo

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("funcionarios")
}

model Product {
  id             String          @id @default(uuid())
  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [id])
  name           String
  description    String?
  price          Decimal         @db.Decimal(10, 2)
  stock          Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  saleItems      SaleItem[]
  stockMovements StockMovement[]
  purchaseOrderItems PurchaseOrderItem[] // Nova relação
}

model StockMovement {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  type      String
  quantity  Int
  createdAt DateTime @default(now())
}

model Sale {
  id             String            @id @default(uuid())
  organizationId String
  organization   Organization      @relation(fields: [organizationId], references: [id])
  pessoaId       String
  pessoa         Pessoa            @relation(fields: [pessoaId], references: [id])
  orderNumber    String            @unique
  totalAmount    Decimal           @db.Decimal(10, 2)
  feeAmount      Decimal?          @db.Decimal(10, 2)
  netAmount      Decimal?          @db.Decimal(10, 2)
  paymentMethod  String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  saleItems      SaleItem[]
  accountsRec    AccountRec[]
  installments   SaleInstallment[]
  paymentTermId  String? // Novo campo para o prazo de pagamento
  paymentTerm    PaymentTerm?      @relation(fields: [paymentTermId], references: [id])
}

model PaymentTerm {
  id               String       @id @default(uuid())
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id])
  name             String
  description      String?
  installmentsDays Int[]
  interestRate     Decimal?     @db.Decimal(5, 2)
  sales            Sale[]
  purchaseOrders   PurchaseOrder[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@unique([organizationId, name])
  @@map("payment_terms")
}

model SaleItem {
  id        String   @id @default(uuid())
  saleId    String
  sale      Sale     @relation(fields: [saleId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SaleInstallmentStatus {
  PENDING
  PAID
  OVERDUE
}

model SaleInstallment {
  id                String                @id @default(uuid())
  saleId            String
  sale              Sale                  @relation(fields: [saleId], references: [id])
  amount            Decimal
  dueDate           DateTime
  status            SaleInstallmentStatus
  paidAt            DateTime?
  installmentNumber Int
  accountRecId      String? // Novo campo para vincular à conta a receber principal
  accountRec        AccountRec?           @relation(fields: [accountRecId], references: [id])
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  @@map("sale_installments")
}

// --- MODELOS FINANCEIROS ---
enum TipoTransacaoPrisma {
  CREDITO
  DEBITO
}

enum TipoContaContabilPrisma {
  ATIVO
  PASSIVO
  PATRIMONIO_LIQUIDO
  RECEITA
  DESPESA
}

model AccountPay {
  id                String         @id @default(uuid())
  organizationId    String
  organization      Organization   @relation(fields: [organizationId], references: [id])
  description       String
  amount            Decimal        @db.Decimal(10, 2)
  dueDate           DateTime
  paid              Boolean        @default(false)
  paidAt            DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  isInstallment     Boolean?
  installmentNumber Int?
  totalInstallments Int?
  contaContabilId   String?
  contaContabil     ContaContabil? @relation(fields: [contaContabilId], references: [id])
  transacaoId       String?        @unique
  transacao         Transacao?     @relation(fields: [transacaoId], references: [id])

  @@map("accounts_pay")
}

model AccountRec {
  id               String            @id @default(uuid())
  organizationId   String
  organization     Organization      @relation(fields: [organizationId], references: [id])
  saleId           String?
  sale             Sale?             @relation(fields: [saleId], references: [id])
  description      String
  amount           Decimal           @db.Decimal(10, 2)
  dueDate          DateTime
  received         Boolean           @default(false)
  receivedAt       DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  contaCorrenteId  String?
  contaCorrente    ContaCorrente?    @relation(fields: [contaCorrenteId], references: [id])
  transacaoId      String?           @unique
  transacao        Transacao?        @relation(fields: [transacaoId], references: [id])
  saleInstallments SaleInstallment[] // Adicionado para a relação inversa
}

model ContaContabil {
  id                     String                  @id @default(uuid())
  organizationId         String
  organization           Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  codigo                 String
  nome                   String
  tipo                   TipoContaContabilPrisma
  aceitaLancamento       Boolean                 @default(true)
  contaPaiId             String?
  contaPai               ContaContabil?          @relation("SubContas", fields: [contaPaiId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subContas              ContaContabil[]         @relation("SubContas")
  transacoes             Transacao[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  AccountPay             AccountPay[]
  creditCardTransactions CreditCardTransaction[]
  cartoesDeCredito       CreditCard[]            @relation("CartaoParaContaPassivo")

  @@unique([organizationId, codigo])
  @@map("contas_contabeis")
}

model ContaCorrente {
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  nome           String
  numeroConta    String
  agencia        String?
  saldo          Decimal      @db.Decimal(10, 2)
  limite         Decimal      @default(0) @db.Decimal(10, 2) // Adicionado
  moeda          String       @default("BRL")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  transacoes     Transacao[]
  accountsRec    AccountRec[]

  @@unique([organizationId, numeroConta])
  @@map("contas_correntes")
}

model Transacao {
  id              String              @id @default(uuid())
  organizationId  String
  organization    Organization        @relation(fields: [organizationId], references: [id])
  tipo            TipoTransacaoPrisma
  valor           Decimal             @db.Decimal(10, 2)
  moeda           String
  descricao       String?
  dataHora        DateTime            @default(now())
  contaContabilId String
  fitId           String?
  contaContabil   ContaContabil       @relation(fields: [contaContabilId], references: [id])
  contaCorrenteId String?
  contaCorrente   ContaCorrente?      @relation(fields: [contaCorrenteId], references: [id], onDelete: NoAction)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  AccountPay      AccountPay?
  AccountRec      AccountRec?

  @@unique([contaCorrenteId, fitId])
  @@map("transacoes")
}

// --- MODELOS DE CARTÃO DE CRÉDITO ---
model CreditCard {
  id                     String                  @id @default(uuid())
  organizationId         String
  organization           Organization            @relation(fields: [organizationId], references: [id])
  name                   String
  flag                   String
  closingDay             Int
  dueDate                Int
  transactions           CreditCardTransaction[]
  bills                  CreditCardBill[]
  contaContabilPassivoId String?
  contaContabilPassivo   ContaContabil?          @relation("CartaoParaContaPassivo", fields: [contaContabilPassivoId], references: [id])

  @@map("credit_cards")
}

model CreditCardTransaction {
  id                 String          @id @default(uuid())
  creditCardId       String
  creditCard         CreditCard      @relation(fields: [creditCardId], references: [id])
  description        String
  amount             Decimal         @db.Decimal(10, 2)
  date               DateTime
  isInstallment      Boolean         @default(false)
  installments       Int?
  currentInstallment Int?
  contaContabilId    String?
  contaContabil      ContaContabil?  @relation(fields: [contaContabilId], references: [id])
  creditCardBillId   String?
  creditCardBill     CreditCardBill? @relation(fields: [creditCardBillId], references: [id])
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  fingerprint String? @unique // Campo para detecção de duplicatas

  @@map("credit_card_transactions")
}

model CreditCardBill {
  id             String                  @id @default(uuid())
  organizationId String
  organization   Organization            @relation(fields: [organizationId], references: [id])
  creditCardId   String
  creditCard     CreditCard              @relation(fields: [creditCardId], references: [id])
  name           String
  startDate      DateTime
  endDate        DateTime
  dueDate        DateTime
  totalAmount    Decimal                 @db.Decimal(10, 2)
  paid           Boolean                 @default(false)
  paidAt         DateTime?
  transactions   CreditCardTransaction[]
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt

  @@map("credit_card_bills")
}

// --- MODELOS AUXILIARES ---
model XmlImportLog {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  nfeKey         String       @unique
  createdAt      DateTime     @default(now())
}

// --- MODELOS DA LANDING PAGE ---
model LandingPage {
  id              String        @id @default(uuid())
  name            String        @unique @default("default")
  logoText        String?
  logoImageId     String?
  logoImage       Media?        @relation(fields: [logoImageId], references: [id])
  customThemeName String? // Novo campo para o nome do tema personalizado
  sections        Section[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Organization    Organization? @relation(fields: [organizationId], references: [id])
  organizationId  String?
}

model Section {
  id            String      @id @default(uuid())
  landingPageId String
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id])
  order         Int
  type          String
  content       Json
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([landingPageId, order])
}

model Media {
  id               String        @id @default(uuid())
  organizationId   String?
  organization     Organization? @relation(fields: [organizationId], references: [id])
  filename         String        @unique
  mimetype         String
  size             Int
  path             String        @unique
  width            Int?
  height           Int?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  landingPageLogos LandingPage[]
}

model CreditCardFee {
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  installments  Int // Número de parcelas (ex: 1, 2, 3, ...)
  feePercentage Decimal @db.Decimal(5, 2) // Porcentagem da taxa (ex: 4.99)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, installments]) // Garante que só há uma taxa por nº de parcela
  @@map("credit_card_fees")
}

// --- MODELOS DE PEDIDOS DE COMPRA ---
enum PurchaseOrderStatus {
  PENDING
  RECEIVED
  CANCELED
}

model PurchaseOrder {
  id                   String                @id @default(uuid())
  organizationId       String
  organization         Organization          @relation(fields: [organizationId], references: [id])
  fornecedorId         String
  fornecedor           Fornecedor            @relation(fields: [fornecedorId], references: [pessoaId])
  orderNumber          String                @unique
  totalAmount          Decimal               @db.Decimal(10, 2)
  status               PurchaseOrderStatus   @default(PENDING)
  orderDate            DateTime              @default(now())
  expectedDeliveryDate DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  items                PurchaseOrderItem[]
  paymentTermId        String? // Adicionado para o prazo de pagamento
  paymentTerm          PaymentTerm?          @relation(fields: [paymentTermId], references: [id])

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String        @id @default(uuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  productId       String
  product         Product       @relation(fields: [productId], references: [id])
  quantity        Int
  price           Decimal       @db.Decimal(10, 2)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("purchase_order_items")
}
