generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  // Adicione a linha abaixo:
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- MODELOS DE USUÁRIO E CONFIGURAÇÕES ---

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  clients               Client[]
  products              Product[]
  sales                 Sale[]
  accountsPay           AccountPay[]
  accountsRec           AccountRec[]
  contasCorrentes       ContaCorrente[]
  contasContabeis       ContaContabil[]
  settings              UserSettings?
  XmlImportLog          XmlImportLog[]
  transacoes            Transacao[]
  creditCards           CreditCard[] // Relação com cartões
  transactionCategories TransactionCategory[] // Relação com categorias
  CreditCardBill        CreditCardBill[]
}

model UserSettings {
  id                    String  @id @default(uuid())
  userId                String  @unique
  user                  User    @relation(fields: [userId], references: [id])
  defaultReceitaContaId String?
  defaultCaixaContaId   String?
  defaultDespesaContaId String?

  @@map("user_settings")
}

// --- MODELOS DE NEGÓCIO (VENDAS, PRODUTOS, CLIENTES) ---

model Client {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  name            String
  email           String?   @unique
  phone           String?
  address         String?
  birthDate       DateTime?
  gender          String?
  preferences     String?
  purchaseHistory Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sales           Sale[]
}

model Product {
  id             String          @id @default(uuid())
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  name           String
  description    String?
  price          Decimal         @db.Decimal(10, 2)
  stock          Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  saleItems      SaleItem[]
  stockMovements StockMovement[]
}

model StockMovement {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  type      String
  quantity  Int
  createdAt DateTime @default(now())
}

model Sale {
  id            String       @id @default(uuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  clientId      String
  client        Client       @relation(fields: [clientId], references: [id])
  orderNumber   String       @unique
  totalAmount   Decimal      @db.Decimal(10, 2)
  feeAmount     Decimal?     @db.Decimal(10, 2)
  netAmount     Decimal?     @db.Decimal(10, 2)
  paymentMethod String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  saleItems     SaleItem[]
  accountsRec   AccountRec[]
}

model SaleItem {
  id        String   @id @default(uuid())
  saleId    String
  sale      Sale     @relation(fields: [saleId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- MODELOS FINANCEIROS ---

enum TipoTransacaoPrisma {
  CREDITO
  DEBITO
}

enum TipoContaContabilPrisma {
  ATIVO
  PASSIVO
  PATRIMONIO_LIQUIDO
  RECEITA
  DESPESA
}

model AccountPay {
  id                String    @id @default(uuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  description       String
  amount            Decimal   @db.Decimal(10, 2)
  dueDate           DateTime
  paid              Boolean   @default(false)
  paidAt            DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isInstallment     Boolean? 
  installmentNumber Int? 
  totalInstallments Int? 

  @@map("accounts_pay")
}

model AccountRec {
  id              String         @id @default(uuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  saleId          String?
  sale            Sale?          @relation(fields: [saleId], references: [id])
  description     String
  amount          Decimal        @db.Decimal(10, 2)
  dueDate         DateTime
  received        Boolean        @default(false)
  receivedAt      DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  contaCorrenteId String?
  contaCorrente   ContaCorrente? @relation(fields: [contaCorrenteId], references: [id])
}

model ContaContabil {
  id               String                  @id @default(uuid())
  userId           String
  user             User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  codigo           String
  nome             String
  tipo             TipoContaContabilPrisma
  aceitaLancamento Boolean                 @default(true)
  contaPaiId       String?
  contaPai         ContaContabil?          @relation("SubContas", fields: [contaPaiId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subContas        ContaContabil[]         @relation("SubContas")
  transacoes       Transacao[]
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt

  @@unique([userId, codigo])
  @@map("contas_contabeis")
}

model ContaCorrente {
  id          String       @id @default(uuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  nome        String
  numeroConta String
  agencia     String?
  saldo       Decimal      @db.Decimal(10, 2)
  moeda       String       @default("BRL")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  transacoes  Transacao[]
  accountsRec AccountRec[]

  @@unique([userId, numeroConta])
  @@map("contas_correntes")
}

model Transacao {
  id              String              @id @default(uuid())
  userId          String
  user            User                @relation(fields: [userId], references: [id])
  tipo            TipoTransacaoPrisma
  valor           Decimal             @db.Decimal(10, 2)
  moeda           String
  descricao       String?
  dataHora        DateTime            @default(now())
  contaContabilId String
  contaContabil   ContaContabil       @relation(fields: [contaContabilId], references: [id])
  contaCorrenteId String?
  contaCorrente   ContaCorrente?      @relation(fields: [contaCorrenteId], references: [id], onDelete: NoAction)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@map("transacoes")
}

// --- MODELOS DE CARTÃO DE CRÉDITO ---

model CreditCard {
  id           String                  @id @default(uuid())
  userId       String
  user         User                    @relation(fields: [userId], references: [id])
  name         String
  flag         String
  closingDay   Int
  dueDate      Int
  transactions CreditCardTransaction[]
  bills        CreditCardBill[]

  @@map("credit_cards")
}

model CreditCardTransaction {
  id                 String               @id @default(uuid())
  creditCardId       String
  creditCard         CreditCard           @relation(fields: [creditCardId], references: [id])
  description        String
  amount             Decimal              @db.Decimal(10, 2)
  date               DateTime
  isInstallment      Boolean              @default(false)
  installments       Int?
  currentInstallment Int?
  categoryId         String?
  category           TransactionCategory? @relation(fields: [categoryId], references: [id])
  creditCardBillId   String?
  creditCardBill     CreditCardBill?      @relation(fields: [creditCardBillId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@map("credit_card_transactions")
}

model CreditCardBill {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  creditCardId String
  creditCard   CreditCard @relation(fields: [creditCardId], references: [id])

  name        String
  startDate   DateTime
  endDate     DateTime
  dueDate     DateTime
  totalAmount Decimal   @db.Decimal(10, 2)
  paid        Boolean   @default(false)
  paidAt      DateTime?

  transactions CreditCardTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("credit_card_bills")
}

model TransactionCategory {
  id                     String                  @id @default(uuid())
  userId                 String
  user                   User                    @relation(fields: [userId], references: [id])
  name                   String
  creditCardTransactions CreditCardTransaction[]

  @@unique([userId, name])
  @@map("transaction_categories")
}

// --- MODELOS AUXILIARES ---

model XmlImportLog {
  id        String   @id @default(cuid())
  nfeKey    String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
