generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                    String                @id @default(uuid())
  name                  String
  absorbCreditCardFee   Boolean               @default(false)
  creditCardReceiveDays Int?                  @default(30)
  accountsRec           AccountRec[]
  metalAccounts         MetalAccount[]
  landingPages          LandingPage[]
  media                 Media[]
  products              Product[]
  sales                 Sale[]
  stockMovements        StockMovement[]
  users                 User[]
  xmlImportLogs         XmlImportLog[]
  accountsPay           AccountPay[]
  analisesQuimicas      AnaliseQuimica[]
  chemical_reactions    chemical_reactions[]
  clients               Client[]
  contasContabeis       ContaContabil[]
  contasCorrentes       ContaCorrente[]
  creditCardBills       CreditCardBill[]
  CreditCardFee         CreditCardFee[]
  creditCards           CreditCard[]
  fornecedores          Fornecedor[]
  funcionarios          Funcionario[]
  inventoryLots         InventoryLot[]
  laborCostTableEntries LaborCostTableEntry[]
  metalCredits          MetalCredit[]
  operationalCosts      OperationalCost[]
  paymentTerms          PaymentTerm[]
  pessoas               Pessoa[]
  productGroups         ProductGroup[]
  purchaseOrders        PurchaseOrder[]
  pure_metal_lots       pure_metal_lots[]
  quotations            Quotation[]
  recoveryOrders        RecoveryOrder[]
  recuperacoes          Recuperacao[]
  transacoes            Transacao[]
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  password       String
  name           String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  role           Role          @default(USER)
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  settings       UserSettings?
}

model UserSettings {
  id                      String  @id @default(uuid())
  userId                  String  @unique
  defaultReceitaContaId   String?
  defaultCaixaContaId     String?
  defaultDespesaContaId   String?
  metalStockAccountId     String?
  productionCostAccountId String?
  user                    User    @relation(fields: [userId], references: [id])

  @@map("user_settings")
}

model Pessoa {
  id                          String           @id @default(uuid())
  organizationId              String
  type                        PessoaType
  name                        String
  razaoSocial                 String?
  email                       String?          @unique
  phone                       String?
  cpf                         String?          @unique
  cnpj                        String?          @unique
  birthDate                   DateTime?
  gender                      String?
  cep                         String?
  logradouro                  String?
  numero                      String?
  complemento                 String?
  bairro                      String?
  cidade                      String?
  uf                          String?
  createdAt                   DateTime         @default(now())
  updatedAt                   DateTime         @updatedAt
  externalId                  String?          @unique
  sales                       Sale[]
  analisesQuimicasComoCliente AnaliseQuimica[] @relation("PessoaAnalisesQuimicas")
  client                      Client?
  fornecedor                  Fornecedor?
  funcionario                 Funcionario?
  metalCredits                MetalCredit[]
  organization                Organization     @relation(fields: [organizationId], references: [id])
  metalAccounts               MetalAccount[]

  @@map("pessoas")
}

model Client {
  pessoaId       String       @id
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  pessoa         Pessoa       @relation(fields: [pessoaId], references: [id], onDelete: Cascade)

  @@map("clients")
}

model Fornecedor {
  pessoaId       String          @id
  organizationId String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organization   Organization    @relation(fields: [organizationId], references: [id])
  pessoa         Pessoa          @relation(fields: [pessoaId], references: [id], onDelete: Cascade)
  purchaseOrders PurchaseOrder[]

  @@map("fornecedores")
}

model Funcionario {
  pessoaId       String       @id
  organizationId String
  hireDate       DateTime
  position       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  pessoa         Pessoa       @relation(fields: [pessoaId], references: [id], onDelete: Cascade)

  @@map("funcionarios")
}

model Product {
  id                 String              @id @default(uuid())
  name               String
  description        String?
  price              Decimal             @db.Decimal(10, 2)
  stock              Float?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  organizationId     String
  costPrice          Decimal?            @db.Decimal(10, 2)
  productGroupId     String?
  goldValue          Float?
  externalId         String?             @unique
  organization       Organization        @relation(fields: [organizationId], references: [id])
  productGroup       ProductGroup?       @relation(fields: [productGroupId], references: [id])
  saleItems          SaleItem[]
  stockMovements     StockMovement[]
  inventoryLots      InventoryLot[]
  purchaseOrderItems PurchaseOrderItem[]
}

model ProductGroup {
  id                     String       @id @default(uuid())
  organizationId         String
  name                   String
  description            String?
  commissionPercentage   Decimal?     @db.Decimal(5, 2)
  isReactionProductGroup Boolean      @default(false)
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  products               Product[]
  organization           Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, name])
  @@map("product_groups")
}

model InventoryLot {
  id                String              @id @default(uuid())
  organizationId    String
  productId         String
  batchNumber       String?             @unique
  costPrice         Decimal             @db.Decimal(10, 2)
  quantity          Float
  remainingQuantity Float
  sourceType        String
  sourceId          String
  notes             String?
  receivedDate      DateTime            @default(now())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  saleItems         SaleItem[]
  organization      Organization        @relation(fields: [organizationId], references: [id])
  product           Product             @relation(fields: [productId], references: [id])
  reaction          chemical_reactions? @relation("ReactionToBatch")

  @@map("inventory_lots")
}

model StockMovement {
  id             String       @id @default(uuid())
  productId      String
  type           String
  quantity       Float
  createdAt      DateTime     @default(now())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  product        Product      @relation(fields: [productId], references: [id])
}

model Sale {
  id                String            @id @default(uuid())
  orderNumber       Int               @unique
  totalAmount       Decimal           @db.Decimal(10, 2)
  feeAmount         Decimal?          @db.Decimal(10, 2)
  netAmount         Decimal?          @db.Decimal(10, 2)
  paymentMethod     String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  organizationId    String
  paymentTermId     String?
  pessoaId          String
  goldPrice         Decimal?          @db.Decimal(10, 2)
  goldValue         Decimal?          @db.Decimal(10, 4)
  totalCost         Decimal?          @db.Decimal(10, 2)
  commissionAmount  Decimal?          @db.Decimal(10, 2)
  commissionDetails Json?
  externalId        String?           @unique
  accountsRec       AccountRec[]
  organization      Organization      @relation(fields: [organizationId], references: [id])
  paymentTerm       PaymentTerm?      @relation(fields: [paymentTermId], references: [id])
  pessoa            Pessoa            @relation(fields: [pessoaId], references: [id])
  saleItems         SaleItem[]
  installments      SaleInstallment[]
  pureMetalLots     pure_metal_lots[]
}

model PaymentTerm {
  id               String          @id @default(uuid())
  organizationId   String
  name             String
  description      String?
  installmentsDays Int[]
  interestRate     Decimal?        @db.Decimal(5, 2)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  sales            Sale[]
  organization     Organization    @relation(fields: [organizationId], references: [id])
  purchaseOrders   PurchaseOrder[]

  @@unique([organizationId, name])
  @@map("payment_terms")
}

model SaleItem {
  id              String        @id @default(uuid())
  saleId          String
  productId       String
  quantity        Float
  price           Decimal       @db.Decimal(10, 2)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  costPriceAtSale Decimal       @db.Decimal(10, 2)
  inventoryLotId  String?
  externalId      String?       @unique
  inventoryLot    InventoryLot? @relation(fields: [inventoryLotId], references: [id])
  product         Product       @relation(fields: [productId], references: [id])
  sale            Sale          @relation(fields: [saleId], references: [id])
}

model SaleInstallment {
  id                String                @id @default(uuid())
  saleId            String
  amount            Decimal
  dueDate           DateTime
  paidAt            DateTime?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  installmentNumber Int
  status            SaleInstallmentStatus
  accountRecId      String?
  accountRec        AccountRec?           @relation(fields: [accountRecId], references: [id])
  sale              Sale                  @relation(fields: [saleId], references: [id])

  @@map("sale_installments")
}

model AccountPay {
  id                String         @id @default(uuid())
  description       String
  amount            Decimal        @db.Decimal(10, 2)
  dueDate           DateTime
  paid              Boolean        @default(false)
  paidAt            DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  installmentNumber Int?
  isInstallment     Boolean?
  totalInstallments Int?
  contaContabilId   String?
  organizationId    String
  transacaoId       String?        @unique
  contaContabil     ContaContabil? @relation(fields: [contaContabilId], references: [id])
  organization      Organization   @relation(fields: [organizationId], references: [id])
  transacao         Transacao?     @relation(fields: [transacaoId], references: [id])

  @@map("accounts_pay")
}

model AccountRec {
  id               String            @id @default(uuid())
  saleId           String?
  description      String
  amount           Decimal           @db.Decimal(10, 2)
  dueDate          DateTime
  received         Boolean           @default(false)
  receivedAt       DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  contaCorrenteId  String?
  organizationId   String
  transacaoId      String?           @unique
  externalId       String?           @unique
  contaCorrente    ContaCorrente?    @relation(fields: [contaCorrenteId], references: [id])
  organization     Organization      @relation(fields: [organizationId], references: [id])
  sale             Sale?             @relation(fields: [saleId], references: [id])
  transacao        Transacao?        @relation(fields: [transacaoId], references: [id])
  saleInstallments SaleInstallment[]
}

model ContaContabil {
  id                     String                  @id @default(uuid())
  codigo                 String
  nome                   String
  tipo                   TipoContaContabilPrisma
  aceitaLancamento       Boolean                 @default(true)
  contaPaiId             String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  organizationId         String
  AccountPay             AccountPay[]
  contaPai               ContaContabil?          @relation("SubContas", fields: [contaPaiId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subContas              ContaContabil[]         @relation("SubContas")
  organization           Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creditCardTransactions CreditCardTransaction[]
  cartoesDeCredito       CreditCard[]            @relation("CartaoParaContaPassivo")
  transacoes             Transacao[]

  @@unique([organizationId, codigo])
  @@map("contas_contabeis")
}

model ContaCorrente {
  id                 String            @id @default(uuid())
  nome               String
  numeroConta        String
  agencia            String?
  moeda              String            @default("BRL")
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  deletedAt          DateTime?
  organizationId     String
  limite             Decimal           @default(0) @db.Decimal(10, 2)
  initialBalanceBRL  Decimal           @default(0) @db.Decimal(10, 2)
  initialBalanceGold Decimal           @default(0) @db.Decimal(10, 4)
  type               ContaCorrenteType @default(BANCO)
  accountsRec        AccountRec[]
  organization       Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  transacoes         Transacao[]

  @@unique([organizationId, numeroConta])
  @@map("contas_correntes")
}

model Transacao {
  id              String              @id @default(uuid())
  tipo            TipoTransacaoPrisma
  valor           Decimal             @db.Decimal(10, 2)
  moeda           String
  descricao       String?
  dataHora        DateTime            @default(now())
  contaContabilId String
  contaCorrenteId String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  fitId           String?
  organizationId  String
  goldAmount      Decimal?            @db.Decimal(10, 4)
  AccountRec      AccountRec?
  AccountPay      AccountPay?
  contaContabil   ContaContabil       @relation(fields: [contaContabilId], references: [id])
  contaCorrente   ContaCorrente?      @relation(fields: [contaCorrenteId], references: [id], onDelete: NoAction)
  organization    Organization        @relation(fields: [organizationId], references: [id])

  @@unique([contaCorrenteId, fitId])
  @@map("transacoes")
}

model CreditCard {
  id                     String                  @id @default(uuid())
  name                   String
  flag                   String
  closingDay             Int
  dueDate                Int
  contaContabilPassivoId String?
  organizationId         String
  bills                  CreditCardBill[]
  transactions           CreditCardTransaction[]
  contaContabilPassivo   ContaContabil?          @relation("CartaoParaContaPassivo", fields: [contaContabilPassivoId], references: [id])
  organization           Organization            @relation(fields: [organizationId], references: [id])

  @@map("credit_cards")
}

model CreditCardTransaction {
  id                 String          @id @default(uuid())
  creditCardId       String
  description        String
  amount             Decimal         @db.Decimal(10, 2)
  date               DateTime
  isInstallment      Boolean         @default(false)
  installments       Int?
  currentInstallment Int?
  creditCardBillId   String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  contaContabilId    String?
  fingerprint        String?         @unique
  contaContabil      ContaContabil?  @relation(fields: [contaContabilId], references: [id])
  creditCardBill     CreditCardBill? @relation(fields: [creditCardBillId], references: [id])
  creditCard         CreditCard      @relation(fields: [creditCardId], references: [id])

  @@map("credit_card_transactions")
}

model CreditCardBill {
  id             String                  @id @default(uuid())
  creditCardId   String
  name           String
  startDate      DateTime
  endDate        DateTime
  dueDate        DateTime
  totalAmount    Decimal                 @db.Decimal(10, 2)
  paid           Boolean                 @default(false)
  paidAt         DateTime?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  organizationId String
  creditCard     CreditCard              @relation(fields: [creditCardId], references: [id])
  organization   Organization            @relation(fields: [organizationId], references: [id])
  transactions   CreditCardTransaction[]

  @@map("credit_card_bills")
}

model XmlImportLog {
  id             String       @id @default(cuid())
  nfeKey         String       @unique
  createdAt      DateTime     @default(now())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model LandingPage {
  id              String        @id @default(uuid())
  name            String        @unique @default("default")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  logoImageId     String?
  logoText        String?
  organizationId  String?
  customThemeName String?
  logoImage       Media?        @relation(fields: [logoImageId], references: [id])
  Organization    Organization? @relation(fields: [organizationId], references: [id])
  sections        Section[]
}

model Section {
  id            String      @id @default(uuid())
  landingPageId String
  order         Int
  type          String
  content       Json
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id])

  @@unique([landingPageId, order])
}

model Media {
  id               String        @id @default(uuid())
  filename         String        @unique
  mimetype         String
  size             Int
  path             String        @unique
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  organizationId   String?
  height           Int?
  width            Int?
  landingPageLogos LandingPage[]
  organization     Organization? @relation(fields: [organizationId], references: [id])
}

model CreditCardFee {
  id             String       @id @default(uuid())
  organizationId String
  installments   Int
  feePercentage  Decimal      @db.Decimal(5, 2)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, installments])
  @@map("credit_card_fees")
}

model Recuperacao {
  id                String                  @id @default(uuid())
  organizationId    String
  analiseQuimicaId  String
  status            StatusRecuperacaoPrisma @default(PENDENTE)
  dataInicio        DateTime                @default(now())
  dataFim           DateTime?
  descricaoProcesso String?
  volumeProcessado  Float?
  unidadeProcessada String?
  resultadoFinal    Float?
  unidadeResultado  String?
  observacoes       String?
  dataCriacao       DateTime                @default(now())
  dataAtualizacao   DateTime                @updatedAt
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  analiseQuimica    AnaliseQuimica          @relation(fields: [analiseQuimicaId], references: [id], onDelete: Cascade)
  organization      Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("recuperacoes")
}

model AnaliseQuimica {
  id                          String                     @id @default(uuid())
  organizationId              String
  clienteId                   String?
  numeroAnalise               String                     @unique
  dataEntrada                 DateTime
  descricaoMaterial           String
  volumeOuPesoEntrada         Float
  unidadeEntrada              String
  resultadoAnaliseValor       Float?
  unidadeResultado            String?
  percentualQuebra            Float?
  taxaServicoPercentual       Float?
  teorRecuperavel             Float?
  auEstimadoBrutoGramas       Float?
  auEstimadoRecuperavelGramas Float?
  taxaServicoEmGramas         Float?
  auLiquidoParaClienteGramas  Float?
  status                      StatusAnaliseQuimicaPrisma @default(RECEBIDO)
  dataAnaliseConcluida        DateTime?
  dataAprovacaoCliente        DateTime?
  dataFinalizacaoRecuperacao  DateTime?
  observacoes                 String?
  ordemDeRecuperacaoId        String?
  dataCriacao                 DateTime                   @default(now())
  dataAtualizacao             DateTime                   @updatedAt
  cliente                     Pessoa?                    @relation("PessoaAnalisesQuimicas", fields: [clienteId], references: [id], onDelete: Cascade)
  organization                Organization               @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  metalCredit                 MetalCredit?
  recoveryOrderAsResidue      RecoveryOrder?             @relation("ResidueOfRecovery")
  recuperacoes                Recuperacao[]

  @@map("analises_quimicas")
}

model MetalCredit {
  id                 String         @id @default(uuid())
  organizationId     String
  clientId           String
  chemicalAnalysisId String         @unique
  metal              String
  grams              Float
  date               DateTime       @default(now())
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  chemicalAnalysis   AnaliseQuimica @relation(fields: [chemicalAnalysisId], references: [id])
  client             Pessoa         @relation(fields: [clientId], references: [id])
  organization       Organization   @relation(fields: [organizationId], references: [id])

  @@map("metal_credits")
}

model PurchaseOrder {
  id                   String              @id @default(uuid())
  organizationId       String
  fornecedorId         String
  orderNumber          String              @unique
  totalAmount          Decimal             @db.Decimal(10, 2)
  status               PurchaseOrderStatus @default(PENDING)
  orderDate            DateTime            @default(now())
  expectedDeliveryDate DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  paymentTermId        String?
  items                PurchaseOrderItem[]
  fornecedor           Fornecedor          @relation(fields: [fornecedorId], references: [pessoaId])
  organization         Organization        @relation(fields: [organizationId], references: [id])
  paymentTerm          PaymentTerm?        @relation(fields: [paymentTermId], references: [id])

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String        @id @default(uuid())
  purchaseOrderId String
  productId       String
  quantity        Float
  price           Decimal       @db.Decimal(10, 2)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  product         Product       @relation(fields: [productId], references: [id])
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

  @@map("purchase_order_items")
}

model RecoveryOrder {
  id                           String                    @id @default(uuid())
  organizationId               String
  chemicalAnalysisIds          String[]
  dataInicio                   DateTime                  @default(now())
  dataFim                      DateTime?
  observacoes                  String?
  dataCriacao                  DateTime                  @default(now())
  dataAtualizacao              DateTime                  @updatedAt
  status                       RecoveryOrderStatusPrisma @default(PENDENTE)
  auPuroRecuperadoGramas       Float?
  descricao                    String?
  residueAnalysisId            String?                   @unique
  residuoGramas                Float?
  resultadoProcessamentoGramas Float?
  teorFinal                    Float?
  totalBrutoEstimadoGramas     Float
  organization                 Organization              @relation(fields: [organizationId], references: [id])
  residueAnalysis              AnaliseQuimica?           @relation("ResidueOfRecovery", fields: [residueAnalysisId], references: [id])

  @@map("recovery_orders")
}

model MetalAccount {
  id             String              @id @default(uuid())
  personId       String
  person         Pessoa              @relation(fields: [personId], references: [id])
  type           TipoMetal
  entries        MetalAccountEntry[]
  organizationId String
  organization   Organization        @relation(fields: [organizationId], references: [id])
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  @@unique([organizationId, personId, type])
  @@index([organizationId])
  @@map("metal_accounts")
}

model MetalAccountEntry {
  id             String       @id @default(uuid())
  metalAccountId String
  metalAccount   MetalAccount @relation(fields: [metalAccountId], references: [id])
  date           DateTime
  description    String
  grams          Float
  type           String // e.g., 'recovery', 'sale', 'transfer'
  sourceId       String? // ID of the source entity (e.g., RecoveryOrder, Sale)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("metal_account_entries")
}

model Quotation {
  id             String       @id @default(uuid())
  organizationId String
  metal          TipoMetal
  date           DateTime     @map("quotation_date") @db.Date
  buyPrice       Decimal      @db.Decimal(10, 2)
  sellPrice      Decimal      @db.Decimal(10, 2)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  tipoPagamento  String?
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, metal, date, tipoPagamento])
  @@map("quotations")
}

model LaborCostTableEntry {
  id                   String       @id @default(uuid())
  organizationId       String
  minGrams             Float
  maxGrams             Float?
  goldGramsCharged     Float
  commissionPercentage Decimal?     @db.Decimal(5, 2)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  organization         Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, minGrams])
  @@map("labor_cost_table_entries")
}

model OperationalCost {
  id                    String       @id @default(uuid())
  organizationId        String
  name                  String
  value                 Decimal      @db.Decimal(10, 2)
  type                  String
  appliesToProductGroup String?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  organization          Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, name])
  @@map("operational_costs")
}

model chemical_reactions {
  id                 String                       @id @default(uuid())
  organizationId     String
  auUsedGrams        Float
  notes              String?
  outputProductGrams Float
  status             ChemicalReactionStatusPrisma @default(STARTED)
  reactionDate       DateTime                     @default(now())
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  lots               pure_metal_lots[]            @relation
  organization       Organization                 @relation(fields: [organizationId], references: [id])
  productionBatchId  String?                      @unique
  productionBatch    InventoryLot?                @relation("ReactionToBatch", fields: [productionBatchId], references: [id])

  @@map("chemical_reactions")
}

model pure_metal_lots {
  id                 String               @id @default(uuid())
  organizationId     String
  sourceType         String
  sourceId           String
  metalType          TipoMetal
  initialGrams       Float
  remainingGrams     Float
  purity             Float
  status             PureMetalLotStatus   @default(AVAILABLE)
  entryDate          DateTime             @default(now())
  notes              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  chemical_reactions chemical_reactions[] // Relação muitos-para-muitos
  Organization       Organization         @relation(fields: [organizationId], references: [id])
  saleId             String?
  sale               Sale?                @relation(fields: [saleId], references: [id])
}

model ProductionBatchCounter {
  id              String   @id @default(uuid())
  organizationId  String   @unique
  lastBatchNumber Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("production_batch_counters")
}

enum Role {
  USER
  ADMIN
}

enum PessoaType {
  FISICA
  JURIDICA
}

enum SaleInstallmentStatus {
  PENDING
  PAID
  OVERDUE
}

enum TipoContaContabilPrisma {
  ATIVO
  PASSIVO
  PATRIMONIO_LIQUIDO
  RECEITA
  DESPESA
}

enum TipoTransacaoPrisma {
  CREDITO
  DEBITO
}

enum ContaCorrenteType {
  BANCO
  FORNECEDOR_METAL
  EMPRESTIMO
}

enum StatusAnaliseQuimicaPrisma {
  RECEBIDO
  EM_ANALISE
  ANALISADO_AGUARDANDO_APROVACAO
  APROVADO_PARA_RECUPERACAO
  RECUSADO_PELO_CLIENTE
  EM_RECUPERACAO
  FINALIZADO_RECUPERADO
  CANCELADO
  RESIDUO
}

enum StatusRecuperacaoPrisma {
  PENDENTE
  EM_ANDAMENTO
  FINALIZADA
  CANCELADA
}

enum PurchaseOrderStatus {
  PENDING
  RECEIVED
  CANCELED
}

enum RecoveryOrderStatusPrisma {
  PENDENTE
  EM_ANDAMENTO
  FINALIZADA
  CANCELADA
  AGUARDANDO_RESULTADO
  AGUARDANDO_TEOR
}

enum TipoMetal {
  AU
  AG
  RH
}

enum PureMetalLotStatus {
  AVAILABLE
  USED
  PARTIALLY_USED
}

enum ChemicalReactionStatusPrisma {
  STARTED
  PROCESSING
  PENDING_PURITY
  PENDING_PURITY_ADJUSTMENT
  COMPLETED
  CANCELED
}

enum ReactionLeftoverType {
  BASKET
  DISTILLATE
}

enum ContaMetalType {
  CLIENTE
  FORNECEDOR
  INTERNA
  EMPRESTIMO
}
